version: "3"

tasks:
  default:
    cmds:
      - echo "ISO Taskfile"
  download:
    desc: "Download the official ISO to DATA/ISO/official using the $ISO_URL environment variable."
    cmds:
      - |
        if [ -z "$ISO_URL" ]; then
          echo "Error: Please set ISO_URL in your environment or .env file, e.g. ISO_URL=https://releases.ubuntu.com/24.04.3/ubuntu-24.04.3-desktop-amd64.iso" >&2
          exit 1
        fi
        mkdir -p DATA/ISO/official
        ISO_BASENAME="$(basename "$ISO_URL")"
        ISO_PATH="DATA/ISO/official/$ISO_BASENAME"
        if [ -f "$ISO_PATH" ]; then
          echo "ISO already downloaded at $ISO_PATH"
        else
          wget -O "$ISO_PATH" "$ISO_URL"
          echo "Downloaded ISO to $ISO_PATH"
        fi
  extract:
    desc: "Extract ISO contents to DATA/ISO/extracted/<iso-file-name> (without .iso) using the $ISO_FILE environment variable."
    cmds:
      - |
        if [ -z "$ISO_FILE" ]; then
          echo "Error: Please set ISO_FILE in your environment or .env file, e.g. ISO_FILE=DATA/ISO/official/ubuntu-24.04.3-desktop-amd64.iso" >&2
          exit 1
        fi
        ISO_BASENAME="$(basename "$ISO_FILE")"
        ISO_NAME="${ISO_BASENAME%.iso}"
        EXTRACT_DIR="DATA/ISO/extracted/$ISO_NAME"
        mkdir -p "$EXTRACT_DIR"
        xorriso -osirrox on -indev "$ISO_FILE" -extract / "$EXTRACT_DIR"
        echo "Extracted to $EXTRACT_DIR"
  rm-extract:
    desc: "Remove extracted ISO directories except .gitkeep"
    cmds:
      - sudo find DATA/ISO/extracted -mindepth 1 ! -name '.gitkeep' -exec rm -rf {} +
  patch:
    desc: "Run the cp-nocloud and cp-grub tasks to patch the extracted ISO."
    cmds:
      - task: cp-nocloud
      - task: cp-grub
  cp-nocloud:
    desc: "Copy the nocloud directory to the extracted ISO directory using the $ISO_FILE environment variable."
    cmds:
      - |
        if [ -z "$ISO_FILE" ]; then
          echo "Error: Please set ISO_FILE in your environment or .env file, e.g. ISO_FILE=DATA/ISO/official/ubuntu-24.04.3-desktop-amd64.iso" >&2
          exit 1
        fi
        ISO_BASENAME="$(basename "$ISO_FILE")"
        ISO_NAME="${ISO_BASENAME%.iso}"
        EXTRACT_DIR="DATA/ISO/extracted/$ISO_NAME"
        NO_CLOUD_DIR="nocloud"
        if [ ! -d "$EXTRACT_DIR" ]; then
          echo "Error: Extracted ISO directory $EXTRACT_DIR does not exist. Run the extract task first." >&2
          exit 1
        fi
        if [ ! -d "$NO_CLOUD_DIR" ]; then
          echo "Error: $NO_CLOUD_DIR directory not found in workspace root." >&2
          exit 1
        fi
        cp -r "$NO_CLOUD_DIR" "$EXTRACT_DIR/"
        echo "Copied $NO_CLOUD_DIR to $EXTRACT_DIR/"

  cp-grub:
    desc: "Copy the patched grub files to the extracted ISO directory using the $ISO_FILE environment variable."
    cmds:
      - |
        if [ -z "$ISO_FILE" ]; then
          echo "Error: Please set ISO_FILE in your environment or .env file, e.g. ISO_FILE=DATA/ISO/official/ubuntu-24.04.3-desktop-amd64.iso" >&2
          exit 1
        fi
        ISO_BASENAME="$(basename "$ISO_FILE")"
        ISO_NAME="${ISO_BASENAME%.iso}"
        EXTRACT_DIR="DATA/ISO/extracted/$ISO_NAME"
        PATCH_GRUB_DIR="patch/official/boot/grub"
        if [ ! -d "$EXTRACT_DIR" ]; then
          echo "Error: Extracted ISO directory $EXTRACT_DIR does not exist. Run the extract task first." >&2
          exit 1
        fi
        if [ ! -d "$PATCH_GRUB_DIR" ]; then
          echo "Error: $PATCH_GRUB_DIR directory not found in workspace root." >&2
          exit 1
        fi
        sudo cp -v "$PATCH_GRUB_DIR"/* "$EXTRACT_DIR/boot/grub/"
        echo "Patched grub files copied to $EXTRACT_DIR/boot/grub/"

  remaster:
    desc: "Create a remastered ISO from the extracted and patched directory using xorriso."
    cmds:
      - |
        if [ -z "$ISO_FILE" ]; then
          echo "Error: Please set ISO_FILE in your environment or .env file, e.g. ISO_FILE=DATA/ISO/official/ubuntu-24.04.3-desktop-amd64.iso" >&2
          exit 1
        fi
        ISO_BASENAME="$(basename "$ISO_FILE")"
        ISO_NAME="${ISO_BASENAME%.iso}"
        EXTRACT_DIR="DATA/ISO/extracted/$ISO_NAME"
        OUTPUT_DIR="DATA/ISO/remastered"
        OUTPUT_ISO="$OUTPUT_DIR/${ISO_NAME}-autoinstall.iso"
        # Shorten volume ID to max 32 chars
        VOLID="${ISO_NAME}-autoinstall"
        VOLID="${VOLID:0:32}"
        ELTORITO_IMG="$EXTRACT_DIR/boot/grub/i386-pc/eltorito.img"
        if [ ! -d "$EXTRACT_DIR" ]; then
          echo "Error: Extracted ISO directory $EXTRACT_DIR does not exist. Run the extract and patch tasks first." >&2
          exit 1
        fi
        if [ ! -f "$ELTORITO_IMG" ]; then
          echo "Error: El Torito image $ELTORITO_IMG not found." >&2
          exit 1
        fi
        mkdir -p "$OUTPUT_DIR"
        sudo xorriso -as mkisofs \
          -r -V "$VOLID" \
          -o "$OUTPUT_ISO" \
          -J -l -cache-inodes \
          -c boot.catalog \
          -b boot/grub/i386-pc/eltorito.img \
          -no-emul-boot -boot-load-size 4 -boot-info-table \
          "$EXTRACT_DIR"
        # Fix ownership of the remastered ISO to the current user
        sudo chown "$USER":"$USER" "$OUTPUT_ISO"
        echo "Remastered ISO created at $OUTPUT_ISO and ownership set to $USER"
